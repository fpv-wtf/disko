SHELL=/bin/bash

#initialize HAVE_ALL_DEPS
HAVE_ALL_DEPS=1

CFLAGS+=-fPIC

#output directory
LIBDIR=../../lib

#destination of disko tools
ifndef OUTPUTDIR
export OUTPUTDIR=../../bin
endif

#check dependencies

#libpng
ifndef LIBPNG_CHECKED
    $(info check for libpng version >= 1.2)
    ASK=$(shell pkg-config --atleast-version=1.2 libpng && echo "1")
    ifeq ($(ASK),)
        $(info --- INFO ---: libpng was not found or version is older than 1.2. Either adjust PKG_CONFIG_PATH or install the package.)
        HAVE_ALL_DEPS=0
    else
        export LIBPNG_INC=$(shell pkg-config --cflags libpng)
        export LIBPNG_LIBS=$(shell pkg-config --libs libpng)
    endif
    export LIBPNG_CHECKED=1
endif

#libxml2
ifndef LIBXML_CHECKED
    $(info check for libxml2 version >= 2.6)
    ASK=$(shell pkg-config --atleast-version=2.6 libxml-2.0 && echo "1")
    ifeq ($(ASK),)
        $(info --- INFO ---: libxml-2.0 was not found or version is older than 2.6. Either adjust PKG_CONFIG_PATH or install the package.)
        HAVE_ALL_DEPS=0
    else
        export LIBXML_INC=$(shell pkg-config --cflags libxml-2.0)
        export LIBXML_LIBS=$(shell pkg-config --libs libxml-2.0)
    endif
    export LIBXML_CHECKED=1
endif

#sqlite3
ifndef SQLITE3_CHECKED
    $(info check for sqlite3)
    export SQLITE3_INC=$(shell pkg-config --cflags sqlite3)
    ifeq ($(SQLITE3_INC),)
        $(info --- INFO ---: sqlite3 not found. Building without sqlite3 support.)
    else
        export CFLAGS+=-D__ENABLE_SQLITE__ 
        export SQLITE3_LIBS=$(shell pkg-config --libs sqlite3)
    endif
    export SQLITE3_CHECKED=1
endif

#mysql
ifndef MYSQL_CHECKED
    $(info check for mysql)
    ASK=$(shell which mysql_config)
    ifeq ($(ASK),)
        $(info --- INFO ---: mysql not found. Building without mysql support.)
    else
        export MYSQL_INC=$(shell mysql_config --cflags)
        export MYSQL_LIBS=$(shell mysql_config --libs_r)
        export CFLAGS+=-D__ENABLE_MYSQL__ 
    endif
    export MYSQL_CHECKED=1
endif

#unix-odbc
ifndef ODBC_CHECKED
    $(info check for unix-odbc)
    ASK=$(shell ls $(DESTDIR)/usr/include/sql.h 2>/dev/null)
    ifeq ($(ASK),)
        ASK=$(shell ls $(DESTDIR)/usr/local/include/sql.h 2>/dev/null)
        ifeq ($(ASK),)
            $(info --- INFO ---: unix-odbc not found. Building without ODBC support.)
        else
            export FREETDS_PREFIX=$(DESTIR)/usr/local
        endif
    else
        export FREETDS_PREFIX=$(DESTIR)/usr/
    endif
    ifdef FREETDS_PREFIX
        export FREETDS_INC=-I$(FREETDS_PREFIX)/include 
        export CFLAGS+=-D__ENABLE_FREETDS__ 
        export FREETDS_LIBS=-L$(FREETDS_PREFIX)/lib/ -lodbc
    endif
    export ODBC_CHECKED=1
endif

#database?
ifndef SQLITE3_INC
    ifndef FREETDS_INC
        ifndef MYSQL_INC
            $(info --- ERROR ---: No database backend found. Please install either sqlite3, mysql or unix odbc and a fitting driver.)
            HAVE_ALL_DEPS=0
        endif
    endif
endif

#curl
ifndef CURL_CHECKED
    $(info check for libcurl)
    export CURL_INC=$(shell pkg-config --cflags libcurl)
    ifeq ($(CURL_INC),)
        $(info --- INFO ---: libcurl was not found. Either adjust PKG_CONFIG_PATH or install the package.)
        HAVE_ALL_DEPS=0
    else
        export CURL_LIBS=$(shell pkg-config --libs libcurl)
    endif
    export CURL_CHECKED=1
endif

#freetype2
ifndef FREETYPE2_CHECKED
    $(info check for freetype2)
    export FREETYPE2_INC=$(shell pkg-config --cflags freetype2)
    ifeq ($(FREETYPE2_INC),)
        $(info --- INFO ---: freetype2 was not found. Either adjust PKG_CONFIG_PATH or install the package.)
        HAVE_ALL_DEPS=0
    else
        export FREETYPE2_LIBS=$(shell pkg-config --libs freetype2)
    endif
    export FREETYPE2_CHECKED=1
endif

#directfb
ifndef DIRECTFB_CHECKED
    export DIRECTFB_CHECKED=1

    ifneq ($(enable-directfb), n)
        $(info check for directfb)
        export DIRECTFB_INC=$(shell pkg-config --cflags directfb)
        ifeq ($(DIRECTFB_INC),)
            $(info --- INFO ---: directfb was not found. Building without DirectFB core support.)
#            HAVE_ALL_DEPS=
        else
            export DIRECTFB_LIBS=$(shell pkg-config --libs directfb) -Wl,-rpath=$(shell pkg-config --libs-only-L directfb | cut --complement -c1-2)
            export CFLAGS+=-D__HAVE_DIRECTFB__
        endif
    endif
endif

#x11
ifndef X11_CHECKED
    export X11_CHECKED=1

    ifeq ($(enable-x11), y)
        $(info check for X11 and Xv development libraries)
        ASK_X11=$(shell pkg-config --silence-errors --cflags x11)
        ifeq ($(ASK_X11),)
            $(info --- INFO ---: X11 development libraries were not found. Building without X11 core support.)
        else
            ASK_XV=$(shell pkg-config --silence-errors --cflags xv)
            ifeq ($(ASK_XV),)
                $(info --- INFO ---: Xv development libraries were not found. Building without X11 core support.)
            else
                $(info Building with X11 core)
                export X11_INC=$(ASK_X11) $(ASK_XV)
                export X11_LIBS=$(shell pkg-config --libs x11 xv xxf86vm)
                export CFLAGS+='-D__HAVE_XLIB__ -D__ENABLE_MMSFB_X11_CORE__ -D__ENABLE_MMSFBSURFACE_X11_CORE__'
            endif
        endif
    endif
endif

#graphic backends?
ifndef DIRECTFB_INC
    ifndef X11_INC
        $(info --- ERROR ---: No graphics backend found. Please install either directfb or x11 development libs.)
#        HAVE_ALL_DEPS=0
    endif
endif

#mmsmedia, compile always 
export __HAVE_MMSMEDIA__=1
export CFLAGS+=-D__HAVE_MMSMEDIA__

#libxine
ifndef XINE_CHECKED
    $(info check for libxine)
    export XINE_LIBS=$(shell pkg-config --silence-errors --libs libxine)
    ifeq ($(XINE_LIBS),)
        $(info --- INFO ---: libxine was not found. Building without mmsmedia support.)
    else
        # have to do some extra checks because openSuse 10.3 installs libxine.pc even if no
        # development package is installed :-(
        export XINE_INC=$(shell pkg-config --cflags libxine)
        ifeq ($(strip $(XINE_INC)),)
            ASK=$(shell ls /usr/include/xine.h 2>/dev/null)
            ifeq ($(ASK),)
                $(info --- INFO ---: xine headers were not found. Building without mmsmedia support.)
            else
#                export __HAVE_MMSMEDIA__=1
#                export CFLAGS+=-D__HAVE_MMSMEDIA__
		        export CFLAGS+=-D__HAVE_XINE__
            endif
        else
#            export __HAVE_MMSMEDIA__=1
#            export CFLAGS+=-D__HAVE_MMSMEDIA__
	        export CFLAGS+=-D__HAVE_XINE__
        endif
    endif
    export XINE_CHECKED=1
endif



#gstreamer
ifndef GSTREAMER_CHECKED
    $(info check for libgstreamer)
    export GSTREAMER_LIBS=$(shell pkg-config --silence-errors --libs gstreamer-0.10)
    ifeq ($(GSTREAMER_LIBS),)
        $(info --- INFO ---: gstreamer was not found. xxx.)
    else
        export GSTREAMER_INC=$(shell pkg-config --cflags gstreamer-0.10)
        export __HAVE_MMSMEDIA__=1
        export CFLAGS+=-D__HAVE_MMSMEDIA__
        export CFLAGS+=-D__HAVE_GSTREAMER__
    endif
    export GSTREAMER_CHECKED=1
endif




#sigc++
ifndef SIGC_CHECKED
    $(info check for sigc++)
    export SIGC_INC=$(shell pkg-config --cflags sigc++-2.0)
    ifeq ($(SIGC_INC),)
        $(info --- ERROR ---: sigc++-2.0 was not found. Either adjust PKG_CONFIG_PATH or install the package.)
        HAVE_ALL_DEPS=0
    else
        export SIGC_LIBS=$(shell pkg-config --libs sigc++-2.0)
    endif
    export SIGC_CHECKED=1
endif

#vmime
ifndef VMIME_CHECKED
    $(info check for vmime)
    export VMIME_INC=$(shell pkg-config --cflags vmime)
    ifeq ($(VMIME_INC),)
        $(info vmime was not found. Either adjust PKG_CONFIG_PATH or install the package)
        #HAVE_ALL_DEPS=
    else
        export CFLAGS+=-D__HAVE_VMIME__
        export VMIME_LIBS=$(shell pkg-config --libs vmime)
    endif
    export VMIME_CHECKED=1
endif

#alsa
ifndef ALSA_CHECKED
    ifdef __HAVE_MMSMEDIA__ 
        $(info check for alsa)
        export ALSA_LIBS=$(shell pkg-config --silence-errors --libs alsa)
        ifeq ($(ALSA_LIBS),)
            $(info --- INFO ---: alsa was not found. Building without mixer support.)
        else
            export ALSA_INC=$(shell pkg-config --cflags alsa)
            export CFLAGS+=-D__HAVE_MIXER__
        endif
        export ALSA_CHECKED=1
    endif
endif

#openssl
ifndef OPENSSL_CHECKED
    $(info check for openssl)
    export OPENSSL_LIBS=$(shell pkg-config --silence-errors --libs openssl)
    ifeq ($(OPENSSL_LIBS),)
        $(info --- INFO ---: openssl was not found. Building without mmscrypt support.)
    else
        export OPENSSL_INC=$(shell pkg-config --cflags openssl)
        export CFLAGS+=-D__HAVE_MMSCRYPT__
    endif
    export OPENSSL_CHECKED=1
endif

#libpj
ifndef PJ_CHECKED
    $(info check for libpj)
    export PJ_INC=$(shell pkg-config --silence-errors --cflags libpj)
    ifeq ($(PJ_INC),)
        $(info --- INFO ---: libpj was not found. Building without mmssip support.)
    else
        export PJ_LIBS=$(shell pkg-config --libs libpj)
        export __HAVE_MMSSIP__=1
        export CFLAGS+=-D__HAVE_MMSSIP__
    endif
    export PJ_CHECKED=1
endif

#swfdec
ifndef SWFDEC_CHECKED
    $(info check for swfdec)
    export SWFDEC_INC=$(shell pkg-config --silence-errors --cflags swfdec-0.8)
    ifeq ($(SWFDEC_INC),)
        $(info --- INFO ---: swfdec-0.8 was not found. Building without mmsflash support.)
    else
        export SWFDEC_LIBS=$(shell pkg-config --libs swfdec-0.8)
        export __HAVE_MMSFLASH__=1
        export CFLAGS+=-D__HAVE_MMSFLASH__
    endif
    export SWFDEC_CHECKED=1
endif

ifeq ($(HAVE_ALL_DEPS),0)
    $(error Please install all dependencies before continuing.)
endif

#my includes
ifndef INC
    export INC= -I../../inc 
endif 

#libs
ifndef LIBS 
    export LIBS=-L../../lib
endif

#ar
ifndef AR
    export AR=ar
endif

#ranlib
ifndef RANLIB
    export RANLIB=ranlib
endif

#directories
ifeq ($(prefix),)
    export prefix=$(HOME)/$(PROJECTNAME)
else
    export prefix
endif

ifeq ($(bindir),)
    export bindir=$(prefix)/bin
endif

ifeq ($(incdir),)
    export incdir=$(prefix)/include/disko
endif

ifeq ($(libdir),)
    export libdir=$(prefix)/lib/disko
endif

ifeq ($(datadir),)
    export datadir=$(prefix)/share/disko
endif

ifeq ($(sysconfir),)
    export sysconfdir=$(prefix)/etc
endif

#set debug and profiling flags
ifndef PROFILE_FLAG_SET
    export PROFILE_FLAG_SET=1
    ifneq ($(profile),)
        export CFLAGS+=-pg
        export LDFLAGS+=-pg
        debug=yes
    endif
endif

ifndef DEBUG_FLAG_SET
    export DEBUG_FLAG_SET=1
    ifneq ($(debug),)
        $(info Building with debug symbols)
        export CFLAGS+=-O0 -g -Wall -D__ENABLE_DEBUG__
    else 
        ifeq ($(ARCH),arm)
            export CFLAGS+=-O2
        else
            export CFLAGS+=-O3
        endif
    endif
endif

ifndef LOG_FLAG_SET
    export LOG_FLAG_SET=1
    ifneq ($(messages),)
        $(info Building with log messages)
        export CFLAGS+=-D__ENABLE_LOG__
    endif
endif

ifndef SSE_FLAG_SET
    export SSE_FLAG_SET=1
    ifneq ($(sse),)
        $(info Building with MMX/SSE support)
        export CFLAGS+=-D__HAVE_SSE__
    endif
endif

# set variables for pkg-config file
req_str    = "Requires: libxml-2.0 >= 2.6, libcurl, sigc++-2.0, libpng >= 1.2"
libs_str   = "Libs: $(LDFLAGS) -L\$${libdir} -lmmsbase -lmmsconfig -lmmscore -lmmsgui -lmmsinput -lmmstools -lmmsinfo"
cflags_str = "Cflags: $(CFLAGS) -I\$${includedir}"

ifneq ($(DIRECTFB_LIBS),)
    req_str += ", directfb"
endif
ifneq ($(XINE_LIBS),)
    req_str += ", libxine"
    libs_str += " -lmmsmedia"
endif
ifneq ($(GSTREAMER_LIBS),)
    req_str += ", gstreamer-0.10"
#    libs_str += " -lmmsmedia"
endif
ifneq ($(ALSA_LIBS),)
    req_str += ", alsa"
endif
ifneq ($(OPENSSL_LIBS),)
    req_str += ", openssl"
endif
ifneq ($(PJ_LIBS),)
    req_str += ", libpj"
    libs_str += " -lmmssip"
endif
ifdef SWFDEC_LIBS
    req_str += ", swfdec-0.8"
    libs_str += " -lmmsflash"
endif
ifdef SQLITE3_LIBS
    req_str    += ", sqlite3"
    libs_str   += " $(SQLITE3_LIBS)"
    cflags_str += " $(SQLITE3_INC)"
endif 
ifdef MYSQL_LIBS
    libs_str   += " $(MYSQL_LIBS)"
    cflags_str += " $(MYSQL_INC)"
endif 
ifdef FREETDS_LIBS
    libs_str   += " $(FREETDS_LIBS)"
    cflags_str += " $(FREETDS_INC)"
endif 
ifdef X11_LIBS
    req_str    += ", x11"
    libs_str   += " $(X11_LIBS)"
    cflags_str += " $(X11_INC)"
endif 

#always build FBDEV support
#we can think about a flag to switch it off
export CFLAGS+='-D__HAVE_FBDEV__'

#for pupeider
#export CFLAGS+='-D__HAVE_XLIB__'
#export CFLAGS+='-D__NO_XSYNC__'

